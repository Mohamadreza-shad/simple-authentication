// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const signUp = `-- name: SignUp :one
INSERT INTO users(
username,
password,
national_code,
phone
) VALUES(
    $1,$2,$3,$4
)
RETURNING id, username, password, national_code, phone, email, is_active, created_at, updated_at
`

type SignUpParams struct {
	Username     string
	Password     string
	NationalCode string
	Phone        string
}

func (q *Queries) SignUp(ctx context.Context, db DBTX, arg SignUpParams) (User, error) {
	row := db.QueryRow(ctx, signUp,
		arg.Username,
		arg.Password,
		arg.NationalCode,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NationalCode,
		&i.Phone,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users
SET 
    national_code = coalesce($2, national_code),
    phone = coalesce($3, phone),
    email = coalesce($4, email)
WHERE id = $1
`

type UpdateUserProfileParams struct {
	ID           int64
	NationalCode pgtype.Text
	Phone        pgtype.Text
	Email        pgtype.Text
}

func (q *Queries) UpdateUserProfile(ctx context.Context, db DBTX, arg UpdateUserProfileParams) error {
	_, err := db.Exec(ctx, updateUserProfile,
		arg.ID,
		arg.NationalCode,
		arg.Phone,
		arg.Email,
	)
	return err
}

const userByID = `-- name: UserByID :one
SELECT id, username, password, national_code, phone, email, is_active, created_at, updated_at FROM users Where id = $1
`

func (q *Queries) UserByID(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NationalCode,
		&i.Phone,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userByName = `-- name: UserByName :one
SELECT id, username, password, national_code, phone, email, is_active, created_at, updated_at FROM users Where username = $1
`

func (q *Queries) UserByName(ctx context.Context, db DBTX, username string) (User, error) {
	row := db.QueryRow(ctx, userByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.NationalCode,
		&i.Phone,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
